@page "/"

@using System.ComponentModel
@using ModelContextProtocol.Client

@inject IChatClient ChatClient
@inject IMcpClient McpClient

@implements IDisposable

<PageTitle>AzureVox</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
    <NoMessagesContent>
        <div>To get started, try asking about your Azure resources. For example: "List my Azure storage accounts" or "Show me my resource groups".</div>
    </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
    <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
</div>

@code {
    private const string SystemPrompt = @"
        You are an Azure Assistant that helps users manage and query their Azure resources.
        You have access to Azure MCP tools that can help with various Azure services like Storage, Cosmos DB, Key Vault, Azure Monitor, and more.
        
        IMPORTANT: When using Azure MCP tools, ALWAYS include these required parameters:
        - subscription: 1ea35ea5-fd62-43f4-9472-afca6e257f0f
        - tenant: 411e80cf-59ea-46b0-be59-198116b78959
        - auth-method: 0 (which corresponds to 'credential' authentication using Azure CLI)
        
        These parameters are required for all Azure MCP tool calls to access the user's Azure resources.
        
        If the question is not clear, ask for clarification.
        If the question is not related to Azure resources or services, respond with 'I only answer Azure-related questions'.
        Use only simple markdown to format your responses.
        When listing resources, provide clear and organized information.
        Answer in English.
        ";

    private readonly ChatOptions chatOptions = new();
    private IEnumerable<McpClientTool> tools = null!;
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;

    protected override async Task OnInitializedAsync()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
        tools = await McpClient.ListToolsAsync();
        chatOptions.Tools = [.. tools];
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();
        await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
        {
            messages.AddMessages(update, filter: c => c is not TextContent);
            responseText.Text += update.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
